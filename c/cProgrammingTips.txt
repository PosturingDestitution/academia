Eskil Steenberg - https://www.youtube.com/watch?v=443UNeGrFoM 

"In the beginning you always results ... In the end all you want is control"
"I just want an omelet! VS. What can I make today?"


he spends 20min a year looking for memory leaks,
the rest of the world spends all their time trying to avoid garbage
collections.


you want a small technological footprint
he uses (8 years ago) C89, because C99 is too new... and broken.
he does not use all of it. (goto, register, do, continue, auto, volotile)
0 unwrapt dependencies! dont rely on anyone else decisions! 100% control! good
code lasts for decades


typing is not the problem
you spend more time reading your code then the compiler does!
ambiguity is the enemy.


we give commands to the computer to do things
but code also communicates to us what the computer does
so it is very important to READ code, listen to the compiler, etc


"clever is evil"
"c++ is eveil because it makes dumb people think they are clever"
"we are all dumb, own your dumbness"
"operator overloading is evil"
why?
vec_a = vec_b * vec_c;
so what is this? pairwise multiplication? dot product? who knows?
this is way more clear
vector_mult(vec_a, vec_b, vec_c);
vector_dot(vec_a, vec_b, vec_c);


extren int add(int a, int b);
extren float add(float a, float b);
extren double add(double a, double b);
so imagine i type something like this x = add(4, 0.3); what is going to happen?
is addi/addf/addd so hard to type? why do we need to overload and make everything ambiguous by using the same naming convention?
main point there was be EXPLICIT


errors are good! everytime the compiler asks you to fix something that is one less bug


thing.hello = x;
x = thing.Hello;
spot the error? javascript wont!


crashes are good
debuggers are our friends
tools > complexity

naming: good code is wide code
some of his preferred naming conventions:

	#define MYDEF

	MyType	

	my_function()
	myFunction() 
	
	my_variable

bad:
	a==b
	a=b
	
good:
	a == b
        	a = b



array - array of data
type - usually an enum
node - links to other nodes
entity - generic networked thing
handle - pointer to opaqe data structure
func - function pointer or function used as function pointer
internal - function internal to a module

i, j, k, count, length, found, next, previous, aray, list, f, vec

long function are good
sequencial code is easy to read.
write code that does something
alert names: manager, controller, handler (if you see stuff like this then you
arent writing code that does something you are writing code than manipulates
other code which is less straight forward)

now Steenberg tells a story about a friend who wrote code for some sort of "fly
by wire" plane and this code had a main function that called other functions but
those called functions never call other function so only one level of
interaction and this code was very clear it does not hide anything

you want to be able to reason about the state by reading through the code
sequentially

bad:
create_object();
destroy_object();
move_object();

worse:
create_thing();
remove_object();
move_moveable();

better:
object_create();
object_destroy();
object_move();

best: much more resembling a fire structure
modeul_object_create();
module_object_destroy();
module_object_move();


API Design! Start from the outside and go in. (35:30)
