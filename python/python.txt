Python is a high-level, interpreted programming language that is designed to be easy to read and write.

*memory allocation: python's garbage collector handles this for you
*pointer arithmetic: you do not need to manually manipulate memory addresses

code is not compiled into machine code before execution. instead, it is translated into bytecode at runtime.

*faster development: you can write python code, run it immediately, and see the results without having to recompile
*dynamic typing: since python is interpreted, you do not need to declare variable types beforehand
*slow: interpreted languages like python are generally slower than compiled language like C

*key concepts:
	1. everything in python is an object, including strings, lists, disctionaries, and even functions
	2. python has a vast colection of libraries (modules) that provide pre-written code for various tasks, such as file I/O, networking, or data analysis
	3. python provides built-in support for exception handling, allowing you to write robust code that can recover from errors

*type system: python is dynamically typed, so you may encounter issues with type-related errors or unexpected behavior if not used carefully
	1. you can assign values of different types to a single variable
	2. pythons type system infers the type of an object based on its usage
		
*garbage collection: automatically frees memory occupied by objects that are no longer needed. eliminates the need for manual memory management
	1. reference counting: algorithm that tracks the lifetime of an object
	2. mark-and-sweep: when an object is no longer referenced, it is marked as collectible and eventually freed















