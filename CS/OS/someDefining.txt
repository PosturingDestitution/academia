what are filesystems?
	essentially the mthod and data structure that an operating system uses to organize and manage files on a storage device (like a hard drive, SSD, USB drive, or network drive). think of it as the librarian and cataloging system for all the information stored on that device. without a file system, the storage device would just be a raw, unorganized collection of bits.
	functions:
		organization: defines how files and directories (folders) are arranged
		naming: provides a system for assigning names to files and directories
		allocation: manages the physical space on the storage device, allocating blocks of space to files as needed	
		metadata: stores information about files, like their size, creation data, modification date, permissions (who can access them), etc. This information is critical for the OS to work with the files
		integrity: includes mechanisms to help protect against data corruption and errors.
		access control: dictates which users or groups can access which files and directories

	common filesystems: FAT32, NTSF, ext4, APFS, HFS+, exFAT


file structure?
	describes the hierarchical organization of files and directories within a filesystem. its the visual arrangement you see when you open a file explorer 

	key concepts:
		root directory: the top-level directory in a filesystem. it is the starting point for all other directories and files. 
		directories (folders): containers that hold files and/or other directories. they provide a way to group related file together
		files: the actual data stored on the storage device
		path: a sequence of directory names that specifies the location of a file or directory
		hierarchical structure: the tree-like organization of directories within directories. this allows for a logical and manageable way to organize a large number of files


linux (everything is a file?)
	means virtually everything that can be interacted with in the system-files, directories, hardware devices, processes, network sockets, even the system's own kernel-is represented as a file within the filesystem
	so your keyboard, mouse, printer, hard drtives, or even sound card can be interacted with as if they were regular files residing in directories like /dev
	processes are represented by fiels in the /proc 
	network sockets are also represented as files
	directories are files

	the same system calls can be used to interact with almost anything in the system, making the OS simpler and more consistent
	powerful scripting and automation...can write scripts that manipulate hardware or processes in a very directy way
	hides complexitities of hardware and low-level operations from user applications
	enables powerful unix piplin mechanism, where the ouput of one command can be directly fed as input to another (ls -l | grep "myfile")

windows
	primarily focuses on managing files and directories as discrete entities within the filesystem (NTFS). its a more traditional view of how an OS should handle data
	windows has a much stronger emphasis on objects and interfaces. hardware and system resources are typically managed through drivers and APIs rather than directly representing them as files
	device drivers are crucial. they provide the interface between the operating system and hardware devices. these drivers abstract away the low-level details of hardware operation
	the windows registry is a hierarchical database that stores config settings and information about hardware and software. it is central location for system config, but it is NOT a filesystem
	while windows DOES have a concept of named pipes (similar to Unix FIFOs) and certain device file, they're not as deeply integrated into the system's architecture as they are in Linux. windows favors object-oriented approaches and APIs for most interactions




file formats? (txt, docx, csv, jpg, png, gif, mp3, wav, mp4, avi, mov, pdf)
	dictates the exact structure, organization, and arrangement of the bits and bytes that make up a file. includes:
		data types: numbers, text, images, audio, video
		metadata: author, creation date, size, resolution, duration
		compression: reducing file size
		how to interpret the data: how the computer program should read and display the data



what is a partition?
	imagine a large HDD or SSD...its a single physical storage device...a partition is essentially a logical division of that physical storage	

	why use multiple partitions? multiple OSs, organization can help  with backups, security, disk management

	partition table? a data structure located on a stroage device (SSD, HDD, USB) that defines how the storage space is divide into logical sections called partitions...it is not a part of the data stored on the drive...its a small, dedicated area, typically at the beginning of the drive. it is crucial so that the computer can find the table and understand how the disk is organized before it tried to access any data
			MBR (master boot record):
				older: introduced by IBM (1980s)
				limitations: max number of partitions is 4 primary or 3 primary + 1 extended
				structure: contains a small code segment called the MBC (Master Boot Code) that loads an OS's boot loader.
				primary partitions: each primary partition can be used as a separate file system, but only one of them can be marked as active (the one where the OS will be installed)

			GPT (GUID partition table): 
				newer: Microsoft (1999)
				advantages: no limits on the  number of partitions, making it ideal for moders OSs...supprts disk sizes larger than 2TB, each partition has a unique globally unique identifier
				structure: contains a small code segment Protective MBR that serves as a placeholder for compatibility with older systems...also contains metadata about the disk's partition
				primary partitions: can store file ssytems just like primary partitions in MBR

	formatting a partition?
		1. data deletion
		2. file system removal
		3. partition table update


what is the process of mounting/unmounting?
	mounting is the process of making a file system or storage device available to the OS, allowing you to access its contents
	when you mojnt a storage device or file system, the OS creates an entry in its directory structure, mapping the device's name to a local path. this allows you to interact with the mounted device as if it were a regular folder on your computer



linux permissions
	each file and directory has an associated set of permissions that determine which users can read, write, or execute the file. these permissions are represented by three sets of characters: r, w, x
	the owner of a file has three types of permissions: u (user), g (group), o (other)
	there are three modes that define how permissions are set:
		octal mode:
		symbolic mode:
		special permissions flags:
	
	COMMAND
	chmod [options] mode file/directory



windows permissions
	1. ACLs that store permissions as a list of users or groups with specific rights
	2. permissions that determine what action can be performed on a file or directory

	types of perms: RX, W, R, LFC (list folder contents)
	permission modes: owner, group, system administrators and services

	COMMANDS
	icacls - interactively change ACLs
		options: /inheritances:e, /c (changes), /q (quiet mode o, suppresses output)

	calcs - change ACLs (legacy) (icals is current)
		options: /e (enables editing of the ACL), /g (grants specified permissions to users or groups), /r (revokes specified permissions from users or groups), /p (sets inherited permissions)

	can change perms with file explorer also




























