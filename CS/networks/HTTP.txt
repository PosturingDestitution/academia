HTTP is a fundamental protocol used for communication over the web.

HTTP is a request-response protocol that enables data exchange between clients and servers on the internet. It is a set of rules that dictate how information is transmitted, received, and processed.

HTTP Methods:
	1. GET: retrieves data from a resource
	2. POST: creates or updates a resource
	3. PUT: updates an existing resource
	4. DELETE: deletes a resource

HTTP Status Codes:
	1xx (informational): the request has been received, but no action has been taken yet
	2xx (successful): the request was successful and the response contains data
	3xx (redirection): further action needs to be taken before the client can access the requested resource
	4xx (client error): there is an issue with the client's request, such as invalid syntax or incorrect credentials
	5xx (server error): the server encountered an error while processing the request

HTTP Request/Response Cycles
	*simplified*	
	1. client sends GET /index.html request to server
	2. server processes request and responds with 200 OK status code, HTML content, and headers
	3. client receives response and displays the HTML content

benefits and limitations:
	easy implementation for devs
	flexible protocol that can hanle various types of data
	allows chaching and resource sharing

	not secure by default (use HTTPS instead)
	can be vulnerable to attacks like cross-side scripting (XSS) and SQL injection
	limited support for bidirectional communication (HTTP 2.0 attempts to address this)


defending against script kiddies
DEFCON 21 - Chris John Riley gave a talk with the goal of "Describing the defensive uses of HTTP status codes"
https://www.youtube.com/watch?v=H9Kxas65f7A

	1. what
		(http status codes) seems like such a small detail....small detail BIG impact

		5 main classes of response (RFC 2616 HTTP/1.1)
			1xx: informational stuff...you dont get to see that much 
			2xx: most of the time success...your webpage is here...here is the content...please go away
			3xx: redirection
			4xx: you fucked up
			5xx: they fucked up

			(proposed RFC* for 7xx codes) 701 Meh, 719 I am not a teapot, 721 Known unknowns, 722 Unknown unknowns, 732 Fucking Unic‚òêde...there is like 300 of these things?

	2. why
		@thegrugq on twitX - "Stop dismissing 'obscurity' as a security feature, because 'unpredictability' in your defences works to your advantage."

		

	3. how	
		browsers have to be flexible...this leads to interpretation...which leads to the darkside...
		RFCs...they're more of a guideline really

		you have browswers that handle things in slightly different ways	

	4. goals
		
		browser fingerprinting (youre spoofing saying youre firefox? but i can use headers and deterimine youre not so that is odd?)	
		user-agents can be spoofed (obviously), but browser traits cannot...

		intercepting proxies

	5. bringing it together

		- status code all browsers treat as content
		- status codes all browsers do not handle well (1xx, ect..)
		- lots of browswer quirk

		what can we do?
			- fuck with things
			- screw with scanner monkeys
			- make rfc lovers cry into their beer
			- break things in general

		use what we have discorvers to: beak spidering tools, cause false positives/negatives, slow down attackers (the fun way), block successful exploitation

		simplistic view of spiders:
			1. acces target 2. read links/functions 3. test them out 4. if true: continue (what is true?)
			if you get a 200 ok is that true? if you get a 404 is that false? ok
			what if everything is a 200? and everything is a 404? or everything is a 500? so if 200==True ... they will continue scanning

		scanners are attempting to be browsers...
	
		concept of a tarpit (1xx codes)

		blocking successful exploitation
			so we have found a way to make things more difficult...but how to stop them from popping shells?	
	
	6. review
		using status codes to our benefit is fun and useful
		browsers can be quirky
		scanners/attack toolkits are sometimes set in their ways
			take the easy route
			easy to fool

		WAFs need to get more effensive about their defense
			more than just blocking a request
				even if you use a snazzy message
			hacking back is bad
			slowing down known attacks is good

		current tools are much the same as APT
			only as advanced as they need to be
			
		because screwing with sk1dd13s is fun
		ghetto implementation
			PHP (lowest common denom)
				auto-prepend-file
				limited to resources PHP handles
			MITMdump
				MITMproxy == memory hog
				revers proxy mode
