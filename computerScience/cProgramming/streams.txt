In C, a stream is an abstraction that represents a sequence of characters, such as input or output data. Streams are used extensively in C programming for input/output operations.

There are three main types of streams in C:
	1. stdin
	2. stdout
	3. sterr

what is buffering?
	buffering is a technique used to improve performance by reducing the number of I/O operations (input/output operations) required. Instead of writing data directly to the destination (e.g., file, console), it's stored in an intermediate area called a buffer. The buffer acts as a cache, storing data temporarily until it's full or a program explicitly requests that the data be flushed.	

how does buffering work?
	data is written to the stream
	data is stored in the buffer
	buffer is filled with data or data is flushed or written (fflush())

why use buffering?
	buffering eliminates the need for frequent I/O operations, which can be expensive in terms of system resources

stdlib.h functions i like:
	int getc(FILE *stream) this one is a macro?
	int fgetc(FILE *stream) this one is actually a function?
	
	char *gets(char *s) risky just use fgets 
		no line limit ... it reads the entire line without any limit, which can lead to overflow

	char *fgets(char *s, int n, FILE *stream)
		allows you to specify a max number of chars to read (including the newline character)
		so if n is 10 fgets() will read until 9 and add NULL terminator \0	

	int ungetc(int c, FILE *stream)



	
